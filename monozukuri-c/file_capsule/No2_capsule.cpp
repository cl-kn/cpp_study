//***************************************************
/** カプセル化【アクセス指定子を使ってデータを外部から守れ】
 * https://monozukuri-c.com/langcpp-capsule/
 * 12/14
 */
//***************************************************

#include <stdio.h>
#include "POS.h"

#if 0
class POS
{
public:
    int x;
    int y;
};
#endif

int main()
{
    POS pos;

    //座標設定
    pos.setPos(100, 200);
    pos.printPos();

#if 0
    pos.x = 100;
    pos.y = 200; //座標上限が100の場合、違法な書き換え
    printf("x = %d\ny = %d\n", pos.x, pos.y);
#endif
}

/**「カプセル化」について
 * ・メンバ変数のアクセス範囲を制限する機能
 * ・「アクセス指定子」を利用する
 *
 * public    完全公開 オブジェクト外部からのアクセスを許可
 *
 * protected 一部公開 オブジェクト外部からのアクセスを禁止
 *                    継承先クラスからは許可
 *
 * private   非公開   オブジェクト外部からのアクセスを禁止
 *                    継承先クラスも禁止
 *
 * メリット
 * ・値への直接アクセスを禁止し、安全性を高める
 * ・値の事前チェックができる
 *
 * 法則１：アクセス指定子を未定義の場合、「private」
 * 法則２：アクセス指定子は次のアクセス指定子が出るまで継続
 * 法則３：順番に決まりはなく、何度でも記述可能
 *
 * ※コンストラクタ、デストラクタの定義は「public」が基本（クラス呼出し時に使えない）
 * ※構造体にも使用できるが、通常クラスで使用する為、使わない
 * ※構造体では初期値が「public」
 *
*/